package main

const typeTemplate = `// Code generated by entitgen. DO NOT EDIT.
package {{ .PkgName }}

{{ .GoImports }}

{{ if not .NoModel }} 
type {{.ModelName}} struct { {{range $x := .Fields}}
	{{ $x.DeclareField -}} 
{{end}}
}
{{ end }}

// ToProto converts the model to protobuf type.
{{ .ToProtoMethod }}

// FromProto converts the protobuf type to model.
{{ .FromProtoMethod }}

{{ .ModelFromProtoMethod }}

{{ .ModelToProtoMethod }}

{{ if .GenSlice }}

{{ .ModelListFromMethod }}

{{ .ModelListToMethod }}

{{ end }}
`

const (
	toProtoTemplate = `func ({{.Receive}}) ToProto() {{ .Return }} {
	if {{ .ShortName }} == nil {
		return nil
	}
	return {{ .OutputType }}{ 
		{{ range .Fields }}{{.PbName}}: {{ $.FieldToProto . }},
		{{ end }}
	}
}`

	fromProtoTemplate = `func ({{.Receive}}) FromProto({{ .InputArgs }}) {{ .Return}} {
	if {{ .InputName }} == nil {
		return nil
	}
	return {{ .OutputType }}{
		{{ range .Fields }}{{.Name}}: {{ $.FieldToModel . }},
		{{ end }}
	}
}`

	modelFromProtoTemplate = `func {{ .ModelName }}FromProto({{ .InputArgs }}) {{ .Return}} {
	return (*{{.ModelName}})(nil).FromProto({{ .InputVals }})
}`

	modelToProtoTemplate = `func {{ .ModelName }}ToProto({{ .InputArgs }}) {{ .Return }} {
	return {{ .VarName }}.ToProto()
}`

	modelListFromTemplate = `func {{ .ModelName }}ListFrom({{ .InputArgs }}) {{ .Return }} {
	return slice.Map({{.VarName}}, {{ .ModelName }}FromProto)
}`

	modelListToTemplate = `func {{ .ModelName }}ListToProto({{ .InputArgs }}) {{ .Return }} {
	return slice.Map({{.VarName}}, {{ .ModelName }}ToProto)
}`
)
