//go:build gen
// +build gen

package main

import (
	"html/template"
	"log"
	"os"
	"os/exec"
	"strings"
)

const typeTemplate = `// Code generated by entitgen. DO NOT EDIT.
package {{ .PkgName }}

func NullTo{{.Type}}(nul sql.Null{{.Type}}) {{.PType}} {
	if nul.Valid {
		return &nul.{{.Type}}
	}

	return nil
}


func ToNull{{.Type}}(p {{.PType}}) sql.Null{{.Type}} {
	if p == nil {
		return sql.Null{{.Type}}{}
	}

	return sql.Null{{.Type}}{ {{.Type}}: *p, Valid: true}
}
`

type TypeContext struct {
	PkgName string
	Type    string
	PType   string
}

func main() {
	var types = []string{"string", "byte", "int16", "int32", "int64", "bool", "float64", "bool"}
	tmpl := template.Must(template.New("type").Parse(typeTemplate))
	for _, t := range types {
		var (
			ctx = &TypeContext{
				PkgName: "null",
				Type:    strings.Title(t),
				PType:   "*" + t,
			}
		)
		out := strings.ToLower(t) + ".go"
		f, err := os.Create(out)
		if err != nil {
			log.Fatalf("failed to create file %s: %v", out, err)
		}

		if err := tmpl.Execute(f, ctx); err != nil {
			log.Fatalf("failed to execute template: %v", err)
		}
		f.Close()
	}

	// goimports
	exec.Command("goimports", "-w", ".").Run()
}
